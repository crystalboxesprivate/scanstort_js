<!DOCTYPE html>
<meta charset="utf-8">
<style type="text/css">
   body {
      font-family: 'Segoe UI', sans-serif;
      font-size: 8pt;
   }

   h1,
   h2,
   h3 {
      margin: 0;
      padding: 0;
   }

   #render {
      width: 1024px;
      display: block;
      margin-left: auto;
      margin-right: auto;
   }

   .canvases canvas {
      display: block;
      margin-left: auto;
      margin-right: auto;
      max-width: 640px;
   }

   .curve-editor {
      border: 0.5px solid #aaa;
   }

   .row {
      display: flex;
   }

   .column {
      flex: 50%;
   }

   .ranged-slider {
      min-width: 100px;
   }
</style>
<div id='render'></div>
<script id="vert" type="x-shader/x-vertex">
   precision mediump float;
   attribute vec3 pos;
   uniform vec2 resolution;
   varying vec2 uv;
   void main() {
     gl_Position = vec4((pos * 2.0 - vec3(1, 1, 0)), 1.0); 
     uv = vec2(pos.x, 1.0 - pos.y);
   }
</script>
<script id="fragPresent" type="x-shader/x-fragment">
   precision mediump float;
   varying vec2 uv;
   uniform sampler2D texture;
   void main(void) {
      gl_FragColor = texture2D(texture, vec2(uv.x, uv.y)).yxzw; 
   }
</script>
<script id="frag" type="x-shader/x-fragment">
      precision mediump float;
      varying vec2 uv;

      uniform float sh_weight;
      uniform float sh_amp;
      uniform float sh_freq;
      uniform float sh_weightCurveSlot;
      uniform float sh_freqCurveSlot;

      uniform float sv_weight;
      uniform float sv_amp;
      uniform float sv_freq;
      uniform float sv_weightCurveSlot;
      uniform float sv_freqCurveSlot;

      uniform float dh_weight;
      uniform float dh_weightCurveSlot;

      uniform float dv_weight;
      uniform float dv_weightCurveSlot;

      uniform float n_weight;
      uniform float n_weightCurveSlot;
      uniform float n_complexity;
      uniform float n_freq;
      uniform vec2 n_amp;
      uniform float n_offset;

      uniform vec3 g_amount;

      uniform sampler2D texture;
      uniform sampler2D curves;

      uniform vec2 resolution;
      uniform vec2 curveRes;

      float sampleCurve(float slot, float u) {
         u = u < 0.0 ? 0.0 : u > 1.0 ? 1.0 : u;

         float width = curveRes.x;
         float slots = curveRes.y;

         vec2 uv = vec2(u, slot / slots);
         // return texture2D(curves, uv).x * 2.0;
         return 1.0;
      }

      vec2 getSineOffset(float u) {
         float time = u * resolution.y;
         return vec2(
            cos(time * sh_freq * sampleCurve(sh_freqCurveSlot, u)) 
               * sh_amp * sh_weight * sampleCurve(sh_weightCurveSlot, u), 
            sin(time * sv_freq * sampleCurve(sv_freqCurveSlot, u)) 
               * sv_amp * sv_weight * sampleCurve(sv_weightCurveSlot, u));
      }

      vec2 getDirOffset(float u) {
         return vec2(
            dh_weight * sampleCurve(dh_weightCurveSlot, u), 
            dv_weight * sampleCurve(dv_weightCurveSlot, u)
         );
      }

      // The MIT License
      // Copyright Â© 2013 Inigo Quilez
      // Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
      vec2 hash(vec2 x) {
         const vec2 k = vec2( 0.3183099, 0.3678794 );
         x = x*k + k.yx;
         return -1.0 + 2.0*fract( 16.0 * k*fract( x.x*x.y*(x.x+x.y)) );
      }
      float noise(in vec2 p) {
         vec2 i = floor( p );
         vec2 f = fract( p );
         vec2 u = f*f*(3.0-2.0*f);
         return mix( mix( dot( hash( i + vec2(0.0,0.0) ), f - vec2(0.0,0.0) ), 
                           dot( hash( i + vec2(1.0,0.0) ), f - vec2(1.0,0.0) ), u.x),
                     mix( dot( hash( i + vec2(0.0,1.0) ), f - vec2(0.0,1.0) ), 
                           dot( hash( i + vec2(1.0,1.0) ), f - vec2(1.0,1.0) ), u.x), u.y);
      }

      float getDetailedNoise(vec2 uv) {
         uv += vec2(n_offset, n_offset);
         uv *= 8.0 * n_freq;
         mat2 m = mat2( 1.6,  1.2, -1.2,  1.6 );
         float f2 = noise( uv );
         float f  = 0.5000 * f2         ; uv = m*uv;
         f += 0.2500 * noise( uv ); uv = m*uv;
         f += 0.1250 * noise( uv ); uv = m*uv;
         f += 0.0625 * noise( uv ); uv = m*uv;
         return mix(f2, f, n_complexity);
      }

      vec2 getNoiseOffset(float u) {
         return vec2(
            getDetailedNoise(vec2(u, 5.0)) * n_amp.x, 
            getDetailedNoise(vec2(u, -4.0)) * n_amp.y
         ) * n_weight * sampleCurve(n_weightCurveSlot, u); 
      }
   
      void main(void) {
         vec2 offset = uv 
            + getSineOffset(uv.y)
            + getDirOffset(uv.y)
            + getNoiseOffset(uv.y);
         
         gl_FragColor = vec4(
            texture2D(texture, 
               mix(uv, offset, g_amount.z * g_amount.x)
            ).x, vec2(1,1) 
            * texture2D(texture, 
               mix(uv, offset, g_amount.z * g_amount.y)
            ).x, 1.0
         );
         
         //gl_FragColor = vec4(uv, g_amount.z, 1);
      }
   </script>

<script src="./node_modules/react/umd/react.development.js"></script>
<script src="./node_modules/react-dom/umd/react-dom.development.js"></script>
<script src="./dist/main.js"></script>